[{"C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\index.js":"1","C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\App.js":"2","C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\reportWebVitals.js":"3","C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\main\\Calculator.jsx":"4","C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\component\\Button\\index.jsx":"5","C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\component\\Display\\index.jsx":"6"},{"size":313,"mtime":1608685289242,"results":"7","hashOfConfig":"8"},{"size":528,"mtime":1608684703837,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":4116,"mtime":1609195364580,"results":"11","hashOfConfig":"8"},{"size":555,"mtime":1608687360285,"results":"12","hashOfConfig":"8"},{"size":278,"mtime":1608686362389,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1dabm4r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\index.js",[],["28","29"],"C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\App.js",[],"C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\reportWebVitals.js",[],"C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\main\\Calculator.jsx",["30"],"import React, { Component, useState } from 'react';\r\nimport './Calculator.css';\r\n\r\nimport Button from '../component/Button/index';\r\nimport Display from '../component/Display/index';\r\n\r\nconst initialState = {\r\n    displayValue: '0', // valor inicial que será exibido no display\r\n    clearDisplay: false, // propriedade para validar se o display vai ser limpo ou não\r\n    operation: null, // valor inicial da operação\r\n    values: [0, 0], // array com os dois valores que serão calculados\r\n    current: 0 // propriedade para validar qual das duas posições do array será manipulada\r\n}\r\n\r\nclass Calculator extends Component {\r\n\r\n    state = { ...initialState };\r\n\r\n    clearMemory = () => {\r\n        this.setState({ ...initialState });\r\n    }\r\n\r\n    setOperation = (operation) => {\r\n        if (this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === '=';\r\n            const currentOperation = this.state.operation;\r\n\r\n            const values = [...this.state.values];\r\n\r\n            try {\r\n                switch (currentOperation) {\r\n                    case '+':\r\n                        values[0] = values[0] + values[1];\r\n                        break;\r\n\r\n                    case '-':\r\n                        values[0] = values[0] - values[1];\r\n                        break;\r\n\r\n                    case '*':\r\n                        values[0] = values[0] * values[1];\r\n                        break;\r\n\r\n                    case '/':\r\n                        values[0] = values[0] / values[1];\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                values[0] = this.state.values[0];\r\n            }\r\n\r\n            values[1] = 0;\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit = (n) => {\r\n        if (n === '.' && this.state.displayValue.includes('.')) {\r\n            return;\r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue;\r\n        const displayValue = currentValue + n;\r\n\r\n        this.setState({ displayValue, clearDisplay: false });\r\n\r\n        if (n !== '.') {\r\n            const i = this.state.current;\r\n            const newValue = parseFloat(displayValue);\r\n            const values = [...this.state.values];\r\n            values[i] = newValue;\r\n            this.setState({ values });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" triple click={this.clearMemory} />\r\n                < Button label=\"/\" operation click={this.setOperation} />\r\n                <Button label=\"7\" click={this.addDigit} />\r\n                <Button label=\"8\" click={this.addDigit} />\r\n                <Button label=\"9\" click={this.addDigit} />\r\n                <Button label=\"*\" operation click={this.setOperation} />\r\n                <Button label=\"4\" click={this.addDigit} />\r\n                <Button label=\"5\" click={this.addDigit} />\r\n                <Button label=\"6\" click={this.addDigit} />\r\n                <Button label=\"-\" operation click={this.setOperation} />\r\n                <Button label=\"1\" click={this.addDigit} />\r\n                <Button label=\"2\" click={this.addDigit} />\r\n                <Button label=\"3\" click={this.addDigit} />\r\n                <Button label=\"+\" operation click={this.setOperation} />\r\n                <Button label=\"0\" double click={this.addDigit} />\r\n                <Button label=\".\" click={this.addDigit} />\r\n                <Button label=\"=\" operation click={this.setOperation} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\component\\Button\\index.jsx",[],"C:\\Users\\kaila\\OneDrive\\Documentos\\GitHub\\CalculadoraReact\\calculadora\\src\\component\\Display\\index.jsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":28,"nodeType":"37","messageId":"38","endLine":1,"endColumn":36},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]